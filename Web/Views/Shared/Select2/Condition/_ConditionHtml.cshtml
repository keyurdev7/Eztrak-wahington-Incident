@model ViewModels.BaseSelect2VM
@{
    var prefix = ViewData.TemplateInfo.HtmlFieldPrefix ?? "Condition";
    var elementId = ViewData["Id"] != null && !string.IsNullOrEmpty(ViewData["Id"].ToString()) ? ViewData["Id"].ToString() : "condition-id";
    var label = ViewData["Label"] != null && !string.IsNullOrEmpty(ViewData["Label"].ToString()) ? ViewData["Label"].ToString() : "Condition";
    var hideLabel = ViewData["HideLabel"] != null && !string.IsNullOrEmpty(ViewData["HideLabel"].ToString()) ? ViewData["HideLabel"].ToString() : "false";
}

<div class="form-group">
    @if (hideLabel != null && hideLabel == "false")
    {
        <label class="form-label fw-600">@label</label>
    }

    @Html.DropDownListFor(model => model.Id, new List<SelectListItem>() {
    new SelectListItem()
        {
        Value = (Model!=null&&Model.Id > 0)?Model.Id.ToString():"",
        Text = (Model!=null&&Model.Id > 0)?Model.Select2Text:"",
        Selected = (Model!=null&&Model.Id > 0)?true:false,
        }
    },
    new
    {
        @id = elementId,
        @class = "condition form-control customized-select disable-field",
        data_select2_initialize_function = "SetConditionSelect2",
        data_val_required = Model?.ErrorMessage,
        data_val = Model?.IsValidationEnabled.ToString().ToLower()
    })
    <input type="hidden" data-identifier="@prefix" data-input-name="Name" name="Condition.Name" value="@Model.Select2Text" />

    <span asp-validation-for="Id" class="validation-invalid-label condition-error-span"></span>
</div>
