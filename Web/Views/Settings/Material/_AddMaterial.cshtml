@using ViewModels
@model MaterialModifyViewModel

@{
    var categories = new[] { "Containment", "Safety", "Tools", "Testing" }; // you had safety twice, kept as-is — remove duplicate if desired
    var units = new[] { "Each", "Et", "Ft", "Gal" };
}

<div class="form-container addNewMaterial">
    <h3>@(Model?.Id > 0 ? "Edit Material" : "Add Material")</h3>

    <form id="NewMaterialForm" autocomplete="off">
        <input type="hidden" asp-for="Id" />
        @* <div class="mb-2">
            <label>Material ID</label>
            <input type="text" class="form-control" asp-for="MaterialID" placeholder="e.g., MAT-001" />
        </div> *@

        <div class="mb-2">
            <label>Name</label>
            <input type="text" class="form-control" asp-for="Name" placeholder="Material name" />
        </div>

        <div class="mb-2">
            <label>Category</label>
            <select class="form-control" asp-for="Category">
                <option value="">Select Category</option>
                @foreach (var c in categories)
                {
                    if (string.Equals(c, Model?.Category, StringComparison.OrdinalIgnoreCase))
                    {
                        <option value="@c" selected="selected">@c</option>
                    }
                    else
                    {
                        <option value="@c">@c</option>
                    }
                }
            </select>
        </div>

        <div class="mb-2">
            <label>Unit</label>
            <select class="form-control" asp-for="Unit">
                <option value="">Select Unit</option>
                @foreach (var u in units)
                {
                    if (string.Equals(u, Model?.Unit, StringComparison.OrdinalIgnoreCase))
                    {
                        <option value="@u" selected="selected">@u</option>
                    }
                    else
                    {
                        <option value="@u">@u</option>
                    }
                }
            </select>
        </div>

        <div class="mb-2">
            <label>Unit Cost</label>
            <input type="number" class="form-control" asp-for="UnitCost" min="0" step="0.01" />
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-green saveMaterial">@((Model?.Id > 0) ? "Update Material" : "Add Material")</button>
            <button type="button" class="btn btn-gray cancelMaterial">Cancel</button>
        </div>
    </form>
</div>

<script>
    // minimal: you can reuse your existing JS for save via AJAX (like incident team)
    // wire .saveMaterial click to AJAX POST to SaveMaterial action
</script>
