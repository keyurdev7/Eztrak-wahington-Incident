using AutoMapper;
using Centangle.Common.ResponseHelpers.Error;
using Centangle.Common.ResponseHelpers.Models;
using Enums;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using MimeKit.Encodings;
using Models;
using Models.Common.Interfaces;
using Pagination;
using Repositories.Common;
using Repositories.Common.Users.Interface;
using ViewModels;
using ViewModels.Administrator;
using ViewModels.Authentication;
using ViewModels.Role;
using ViewModels.Shared;
using ViewModels.Technician;
using ViewModels.User.interfaces;
using ViewModels.Users;

namespace Web.Controllers.Shared
{
    [Authorize]
    public abstract class UserBaseController<CreateViewModel, UpdateViewModel, DetailViewModel, PaginatedViewModel, Select2ViewModel, SearchViewModel> :
        CrudBaseController<CreateViewModel, UpdateViewModel, DetailViewModel, PaginatedViewModel, Select2ViewModel, SearchViewModel>
        where DetailViewModel : class, IBaseCrudViewModel, new()
        where PaginatedViewModel : class, new()
        where Select2ViewModel : class?, ISelect2BaseVM, new()
        where CreateViewModel : class, IUserCreateViewModel, IBaseCrudViewModel, new()
        where UpdateViewModel : class, IUserUpdateViewModel, IBaseCrudViewModel, IIdentitifier, new()
        where SearchViewModel : class, IBaseSearchModel, new()
    {
        private readonly IUserBaseService<CreateViewModel, UpdateViewModel, DetailViewModel> _service;
        private readonly ILogger<Controller> _logger;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly RolesCatalog _role;
        private readonly bool _hasAdditionalInfo;

        public UserBaseController(
            IUserBaseService<CreateViewModel, UpdateViewModel, DetailViewModel> service,
            ILogger<Controller> logger,
            IMapper mapper,
            UserManager<ApplicationUser> userManager,
            string controllerName,
            string title,
            RolesCatalog role,
            bool hasAdditionalInfo = true
            ) :
            base(service, logger, mapper, controllerName, title)
        {
            _service = service;
            _logger = logger;
            _userManager = userManager;
            _role = role;
            _hasAdditionalInfo = hasAdditionalInfo;
        }

        public override async Task<ActionResult> Create(CreateViewModel model)
        {
            if (model.Role?.Name == RolesCatalog.Technician.ToString())
            {
                ModelState.Remove("Password");
                ModelState.Remove("ConfirmPassword");
                bool isPinCodeUnique = await IsPinCodeUnique(0, model.PinCode);
                if (!isPinCodeUnique)
                {
                    ModelState.AddModelError("PinCode", "Pin Code already in use.");
                }
            }
            else
            {
                ModelState.Remove("PinCode");
                ModelState.Remove("ConfirmPinCode");
            }
            bool isEmailUnique = await IsEmailUnique(0, model.Email);
            if (!isEmailUnique)
            {
                ModelState.AddModelError("Email", "Email already in use.");
            }

            if (string.IsNullOrEmpty(model.Password) || model.UseAutoGeneratedPassword)
            {
                ModelState.Remove("Password");
                ModelState.Remove("ConfirmPassword");
                model.Password = model.ConfirmPassword = "RandomPass@1234";
                model.ChangePassword = model.PinCode == null ? true : false;
            }
            model.HasAdditionInfo = _hasAdditionalInfo;
            model.Role = new RoleBriefViewModel { Name = string.IsNullOrEmpty(model.Role?.Name) ? _role.ToString() : model.Role?.Name };
            model.ChangePassword = false;
            return await base.Create(model);
        }

        public override async Task<ActionResult> Update(UpdateViewModel model)
        {
            ModelState.Remove("Password");
            ModelState.Remove("ConfirmPassword");
            ModelState.Remove("PinCode");
            ModelState.Remove("ConfirmPinCode");
            var userId = _hasAdditionalInfo ? model.UserId : model.Id;
            bool isEmailUnique = await IsEmailUnique(userId, model.Email);
            if (!isEmailUnique && !string.IsNullOrEmpty(model.Email))
            {
                ModelState.AddModelError("Email", "Email already in use.");
            }
            model.HasAdditionInfo = _hasAdditionalInfo;
            return await base.Update(model);
        }

        public virtual async Task<bool> IsEmailUnique(long id, string email)
        {
            return await _service.IsEmailUnique(id, email);
        }
        public virtual async Task<bool> IsPinCodeUnique(long id, string pinCode)
        {
            return await _service.IsPinCodeUnique(id, pinCode);
        }

        public async Task<IActionResult> ValidateEmail(int id, string email)
        {
            return Json(await _service.IsEmailUnique(id, email));
        }

        public async Task<ActionResult> ResetPassword(int id)
        {
            try
            {
                var response = await _service.GetById(id);
                if (response.Status == System.Net.HttpStatusCode.OK)
                {
                    var parsedResponse = response as RepositoryResponseWithModel<DetailViewModel>;
                    var model = parsedResponse?.ReturnModel ?? new();
                    ResetPasswordVM viewModel = new ResetPasswordVM
                    {
                        Email = (model as IEmailVM).Email
                    };
                    return View(viewModel);
                }
                else
                {
                    _logger.LogInformation($"Record with id " + id + "not found");
                    return RedirectToAction("Index");
                }
            }
            catch (Exception ex) { _logger.LogError($"Account ResetPassword method threw an exception, Message: {ex.Message}"); return RedirectToAction("Index"); }
        }

        [HttpPost]
        public async Task<JsonResult> ResetPassword(ResetPasswordVM model)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.FindByEmailAsync(model.Email);
                if (user == null)
                {
                    ModelState.AddModelError("Email", "User does not exist.");
                    //return ReturnProcessedResponse(Centangle.Common.ResponseHelpers.Response.BadRequestResponse(_response));
                }
                var code = await _userManager.GeneratePasswordResetTokenAsync(user);
                var resetResult = await _userManager.ResetPasswordAsync(user, code, model.Password);
                if (resetResult.Succeeded)
                {
                    return new JsonResult(new { success = true });
                }
                else
                {
                    ErrorsHelper.AddErrorsToModelState(resetResult, ModelState, "Password");
                }
            }
            var errors = ModelState.ToDictionary(
             kvp => kvp.Key,
             kvp => kvp.Value.Errors.Select(e => e.ErrorMessage).ToList()
            );
            return new JsonResult(new { success = false, errors });
        }

        public async Task<IActionResult> ValidatePinCode(int id, string PinCode)
        {
            return Json(await _service.IsPinCodeUnique(id, PinCode));
        }

        public async Task<ActionResult> ResetPinCode(int id)
        {
            try
            {
                var response = await _service.GetById(id);
                if (response.Status == System.Net.HttpStatusCode.OK)
                {
                    var parsedResponse = response as RepositoryResponseWithModel<TechnicianDetailViewModel>;
                    var model = parsedResponse?.ReturnModel ?? new();
                    ChangePinCodeVM viewModel = new ChangePinCodeVM
                    {
                        Id = model.Id,
                        CurrentPinCode = model.PinCode
                    };
                    return View(viewModel);
                }
                else
                {
                    _logger.LogInformation($"Record with id " + id + "not found");
                    return RedirectToAction("Index");
                }
            }
            catch (Exception ex) { _logger.LogError($"Account ResetPassword method threw an exception, Message: {ex.Message}"); return RedirectToAction("Index"); }
        }

        [HttpPost]
        public async Task<ActionResult> ResetPinCode(ChangePinCodeVM model)
        {
            if (ModelState.IsValid)
            {
                var resetResult = await _service.ResetPinCode(model);
                if (resetResult.Status == System.Net.HttpStatusCode.OK)
                {
                    return new JsonResult(new { success = true });
                }
                else
                {
                    ErrorsHelper.AddErrorToModelState("PinCode", "Pincode is not updated. Please try again later.", ModelState);
                }
            }
            var errors = ModelState.ToDictionary(
             kvp => kvp.Key,
             kvp => kvp.Value.Errors.Select(e => e.ErrorMessage).ToList()
            );
            return new JsonResult(new { success = false, errors });
        }
    }
}

