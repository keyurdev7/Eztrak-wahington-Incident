using System.ComponentModel.DataAnnotations;
using System.ComponentModel;
using ViewModels.Shared;
using Helpers.File;
using Microsoft.AspNetCore.Http;
using ViewModels.Role;
using ViewModels.User.interfaces;
using ViewModels.CRUD.Interfaces;
using Helpers.ValidationAttributes;

namespace ViewModels.Users
{
    public class UserCreateViewModel : BaseCreateVM, IBaseCrudViewModel, IUserCreateViewModel
    {
        public long Id { get; set; }
        [MaxLength(200)]
        [DisplayName("Name")]
        [Required]
        public string? FirstName { get; set; }

        [MaxLength(200)]
        [DisplayName("Last Name")]
        public string? LastName { get; set; }

        public string? ImageUrl { get; set; }
        public string? FormattedImageUrl { get => string.IsNullOrEmpty(ImageUrl) ? "/Storage/Default/default.jpg" : ImageUrl; }
        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [DisplayName("Use AutoGenerated Password?")]
        public bool UseAutoGeneratedPassword { get; set; } = true;

        [DataType(DataType.Password)]
        [Required]
        [Display(Name = "Password")]
        public string? Password { get; set; }
        [DataType(DataType.Password)]
        [Required]
        [Display(Name = "Confirm Password")]
        [Compare("Password", ErrorMessage = "Confirm Password Does not Match with password")]
        public string? ConfirmPassword { get; set; }

        public bool ChangePassword { get; set; }
        public RoleBriefViewModel Role { get; set; } = new();
        public long UserId { get; set; }
        public bool HasAdditionInfo { get; set; } = false;
        public IFormFile? File { get; set; }
        [DataType(DataType.Password)]
        [Required]
        [Display(Name = "Pin Code")]
        public string? PinCode { get; set; }
        [DataType(DataType.Password)]
        [Required]
        [Display(Name = "Confirm Pin Code")]
        [Compare("PinCode", ErrorMessage = "Confirm pin code Does not Match with pin code")]
        public string? ConfirmPinCode { get; set; }

        [Display(Name = "Phone Number")]
        [DataType(DataType.PhoneNumber)]
        [CustomMobileNumberValidator(ErrorMessage = "Phone no. must be a valid number")]
        public string? PhoneNumber { get; set; }
        public string GetBaseFolder()
        {
            var ext = Path.GetExtension(File.FileName);
            if (ext == ".jpg" || ext == ".jpeg" || ext == ".png")
            {
                return "Images";
            }
            if (ext == ".mp4")
            {
                return "Videos";
            }
            if (ext == ".pdf" || ext == ".docx" || ext == ".xlsx" || ext == ".txt")
            {
                return "Documents";
            }
            return "Others";
        }
    }
}
