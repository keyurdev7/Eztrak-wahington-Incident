using AutoMapper;
using Centangle.Common.ResponseHelpers;
using Centangle.Common.ResponseHelpers.Models;
using DataLibrary;
using Enums;
using Helpers.Extensions;
using Helpers.File;
using Helpers.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Models;
using Models.Common.Interfaces;
using Pagination;
using Repositories.Services.AuthenticationService.Interface;
using System.Security.Claims;
using ViewModels.Authentication;
using ViewModels.Shared;
using ViewModels.User.interfaces;
using ViewModels.Users;

namespace Repositories.Services.AuthenticationService
{
    public class IdentityService : IIdentityService
    {
        private readonly IMapper _mapper;
        private readonly ILogger<IdentityService> _logger;
        private readonly ApplicationDbContext _context;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly IFileHelper _fileHelper;
        private readonly IRepositoryResponse _response;

        public IdentityService(IMapper mapper,
            ILogger<IdentityService> logger,
            IRepositoryResponse response,
            ApplicationDbContext context,
            UserManager<ApplicationUser> userManager,
            IHttpContextAccessor httpContextAccessor,
            IFileHelper fileHelper
            )
        {
            _mapper = mapper;
            _logger = logger;
            _response = response;
            _context = context;
            _userManager = userManager;
            _httpContextAccessor = httpContextAccessor;
            _fileHelper = fileHelper;
        }

        public Task<IRepositoryResponse> SignUp(SignUpVM model, ModelStateDictionary ModelState)
        {
            var mappedModel = _mapper.Map<SignUpModel>(model);
            mappedModel.IsApproved = false;
            return CreateUser((mappedModel as IUserCreateViewModel), ModelState);
        }
        public async Task<IRepositoryResponse> CreateUser(IUserCreateViewModel model, ModelStateDictionary ModelState, string optionalUsernamePrefix = "")
        {
            if (ModelState.IsValid)
            {
                try
                {
                    var user = _mapper.Map<ApplicationUser>(model);
                    user.ImageUrl = model.File != null ? _fileHelper.Save(model) : user.ImageUrl;
                    user.UserName = user.Email;
                    model.Password = model.UseAutoGeneratedPassword ? "Admin@123" : model.Password;
                    user.PinCode = model.PinCode != null ? model.PinCode.EncodePasswordToBase64() : null;
                    try
                    {
                        var result = await _userManager.CreateAsync(user, model.Password);

                        if (result.Succeeded)
                        {
                            var responseModel = new RepositoryResponseWithModel<long>();
                            if (model.Role != null && !string.IsNullOrEmpty(model.Role.Name))
                            {
                                var role = model.Role != null ? model.Role.Name : RolesCatalog.SystemAdministrator.ToString();
                                var roleResult = await _userManager.AddToRoleAsync(user, role);
                                if (!roleResult.Succeeded)
                                {
                                    Errors.AddErrorsToModelState(roleResult, ModelState);
                                    return Response.BadRequestResponse(_response);
                                }
                            }
                            model.UserId = user.Id;
                            responseModel.ReturnModel = user.Id;

                            model.Password = model.ConfirmPassword = "";
                            await _context.AddManualLogData(user, model);
                            return responseModel;
                        }
                        else
                        {
                            Errors.AddErrorsToModelState(result, ModelState);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "CreateUser threw the following exception");
                        ModelState.AddModelError("Sign up exception", ex.Message);
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "CreateUser threw the following exception");
                    ModelState.AddModelError("Sign up exception", ex.Message);
                }
            }

            return Response.BadRequestResponse(_response);
        }


        public async Task<IRepositoryResponse> UpdateUser(IUserUpdateViewModel model, ModelStateDictionary ModelState)
        {
            string errorMsg = "There was some problem in saving data. Please try again later.";
            try
            {
                ModelState.Remove("Password");
                ModelState.Remove("ConfirmPassword");
                if (ModelState.IsValid)
                {
                    var userId = model.HasAdditionInfo ? model.UserId.ToString() : (model as IIdentitifier).Id.ToString();
                    var user = await _userManager.FindByIdAsync(userId);
                    if (user != null)
                    {
                        user = _mapper.Map(model, user);
                        user.Id = model.HasAdditionInfo ? model.UserId : user.Id;
                        user.ImageUrl = model.File != null ? _fileHelper.Save(model) : user.ImageUrl;
                        var result = await _userManager.UpdateAsync(user);
                        if (result.Succeeded == false)
                        {
                            ModelState.AddModelError("", errorMsg);
                            _logger.LogWarning(errorMsg, "Warning while updating user");
                        }
                        else
                        {
                            var responseModel = new RepositoryResponseWithModel<long>();
                            if (model.Role != null && !string.IsNullOrEmpty(model.Role.Name))
                            {
                                var previousRoleId = await _context.UserRoles.Where(x => x.UserId == user.Id).Select(x => x.RoleId).FirstOrDefaultAsync();
                                var previousRole = await _context.Roles.Where(x => previousRoleId == x.Id).Select(x => x.Name).FirstOrDefaultAsync();
                                await _userManager.RemoveFromRoleAsync(user, previousRole);
                                var roleName = model.Role?.Name;
                                var roleResult = await _userManager.AddToRoleAsync(user, roleName);
                                if (!roleResult.Succeeded)
                                {
                                    Errors.AddErrorsToModelState(roleResult, ModelState);
                                }
                            }
                            responseModel.ReturnModel = user.Id;
                            return responseModel;
                        }
                    }
                    else
                    {
                        return Response.NotFoundResponse(_response);
                    }
                }

            }
            catch (Exception ex)
            {
                ModelState.AddModelError("", errorMsg);
                _logger.LogError(ex, "UpdateUser threw following exception.");

            }
            return Response.BadRequestResponse(_response);
        }
        public async Task<IRepositoryResponse> Delete(long id)
        {
            try
            {
                ApplicationUser user = await _context.Users.Where(x => x.Id == id).FirstOrDefaultAsync();
                if (user != null)
                {
                    user.IsDeleted = true;
                    _context.Entry(user).State = EntityState.Modified;
                    await _context.SaveChangesAsync();
                    return new RepositoryResponse();
                }
                else
                {
                    return Response.NotFoundResponse(_response);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Delete User threw the following exception");
                return Response.BadRequestResponse(_response);
            }
        }
        public async Task<IRepositoryResponse> Approve(long id)
        {
            try
            {
                ApplicationUser user = await _context.Users.Where(x => x.Id == id).FirstOrDefaultAsync();
                if (user != null)
                {
                    user.IsApproved = true;
                    _context.Entry(user).State = EntityState.Modified;
                    await _context.SaveChangesAsync();
                    return new RepositoryResponse();
                }
                else
                {
                    return Response.NotFoundResponse(_response);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Delete User threw the following exception");
                return Response.BadRequestResponse(_response);
            }
        }

        public async Task<IRepositoryResponse> GetAll<T>(BaseSearchModel search)
        {
            try
            {
                IQueryable<UserVM> userQueryable = (from user in _context.Users
                                                    join userRole in _context.UserRoles on user.Id equals userRole.UserId
                                                    join r in _context.Roles on userRole.RoleId equals r.Id
                                                    where string.IsNullOrEmpty(search.Search.value) || user.Email.ToLower().Contains(search.Search.value.ToLower())
                                                    select new UserVM
                                                    {
                                                        Id = user.Id,
                                                        Email = user.Email,
                                                        PhoneNumber = user.PhoneNumber,
                                                        UserName = user.UserName,
                                                        //Role = r.Name,
                                                    }).AsQueryable();

                var result = userQueryable as IQueryable<T>;
                var responseModel = new RepositoryResponseWithModel<PaginatedResultModel<T>>();
                responseModel.ReturnModel = await result.Paginate(search);
                return responseModel;
            }
            catch (Exception ex)
            {
                _logger.LogError($"IdentityService GetAll method threw an exception, Message: {ex.Message}");
                return new RepositoryResponseWithModel<PaginatedResultModel<T>>();
            }
        }

        public async Task<UserVM> GetById(long id)
        {
            try
            {
                var user = await (from users in _context.Users
                                  where
                                   users.Id == id
                                  select new UserVM
                                  {
                                      Id = users.Id,
                                      Email = users.Email,
                                      UserName = users.UserName,
                                      PhoneNumber = users.PhoneNumber,
                                  }).FirstOrDefaultAsync();
                if (user != null)
                {
                    return user;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"GetById({id}) threw an exception");
            }
            return null;
        }



        public async Task<IRepositoryResponse> UserDetail()
        {
            var user = _httpContextAccessor?.HttpContext.User;
            var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            var userIdParsed = !string.IsNullOrEmpty(userId) ? long.Parse(userId) : 0;

            var result = await GetById(userIdParsed);

            var responseModel = new RepositoryResponseWithModel<UserVM>();
            responseModel.ReturnModel = result;
            return responseModel;
        }

        public async Task<IRepositoryResponse> RecoverPassword(ResetPasswordVM model, ModelStateDictionary ModelState)
        {
            string errorMsg = "There was some problem in saving data. Please try again later.";
            try
            {
                var user = await _userManager.FindByEmailAsync(model.Email);
                if (user != null)
                {
                    var result = await _userManager.ResetPasswordAsync(user, model.Token, model.Password);
                    if (result.Succeeded == false)
                    {
                        Errors.AddErrorsToModelState(result, ModelState);
                        _logger.LogWarning(errorMsg, "Warning while Recover Password");
                    }
                    else
                    {
                        var responseModel = new RepositoryResponseWithModel<ResetPasswordVM>();
                        responseModel.ReturnModel = model;
                        return responseModel;
                    }
                }
                ModelState.AddModelError("", "No such user exists in our system, try a valid user");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Approved User threw the following exception");
                return Response.BadRequestResponse(_response);
            }
            return Response.BadRequestResponse(_response);
        }

        public async Task<IRepositoryResponse> ChangePassword(ChangePasswordVM model, ModelStateDictionary ModelState)
        {
            string errorMsg = "There was some problem in saving data. Please try again later.";
            try
            {
                var userId = _httpContextAccessor.HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);
                var user = await _userManager.FindByIdAsync(userId);

                if (user != null)
                {
                    var result = await _userManager.ChangePasswordAsync(user, model.CurrentPassword, model.NewPassword);
                    if (result.Succeeded == false)
                    {
                        Errors.AddErrorsToModelState(result, ModelState);
                        _logger.LogWarning(errorMsg, "Warning while Change Password");
                    }
                    else
                    {
                        var responseModel = new RepositoryResponseWithModel<ChangePasswordVM>();
                        responseModel.ReturnModel = model;
                        return responseModel;
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Approved User threw the following exception");
                ModelState.AddModelError("", "Make sure you are entering a correct password");
                return Response.BadRequestResponse(_response);
            }
            return Response.BadRequestResponse(_response);
        }

        public async Task<bool> IsUsernameUnique(long id, string username)
        {
            return await _context.Users.Where(x => x.UserName == username && x.Id != id && x.IsDeleted == false).CountAsync() < 1;
        }

        public async Task<bool> IsEmailUnique(long id, string email)
        {
            return (await _context.Users.Where(x => x.Email == email && x.Id != id && x.IsDeleted == false).CountAsync()) < 1;
        }
    }
}
